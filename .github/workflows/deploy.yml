# name: Deploy
# on:
#   push:
#     branches: [main]
#   workflow_dispatch:
# jobs:
  # deploy-extension:
  #   runs-on: ubuntu-latest
  #   env:
  #     DOCKER_IMAGE: ghcr.io/${{ github.repository }}-extension:latest
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: Login to GitHub container registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Build docker image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: extension
  #         push: true
  #         cache-from: type=gha,scope=extension
  #         cache-to: type=gha,mode=max,scope=extension
  #         tags: ${{ env.DOCKER_IMAGE }}
  # run-extension:
  #   needs: deploy-extension
  #   runs-on: ubuntu-latest
  #   env:
  #     NAME: gm-extension
  #     DOCKER_IMAGE: ghcr.io/${{ github.repository }}-extension:latest
  #   steps:
  #     - name: executing remote ssh commands
  #       uses: extensionleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.MDTPBOX_URL }}
  #         username: ${{ secrets.MDTPBOX_USER }}
  #         key: ${{ secrets.MDTPBOX_SSH_KEY }}
  #         port: ${{ secrets.MDTPBOX_PORT }}
  #         envs: DOCKER_IMAGE,NAME
  #         script_stop: true
  #         script: |
  #           url="gm.tokenpage.xyz"
  #           varsFile=~/.${NAME}.vars
  #           docker pull ${DOCKER_IMAGE}
  #           docker stop ${NAME} && docker rm ${NAME} || true
  #           docker run \
  #               --name ${NAME} \
  #               --detach \
  #               --publish-all \
  #               --restart on-failure \
  #               --env NAME=${NAME} \
  #               --env VIRTUAL_HOST=${url} \
  #               --env LETSENCRYPT_HOST=${url} \
  #               --env-file ${varsFile} \
  #               ${DOCKER_IMAGE}
